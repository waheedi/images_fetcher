var search_data = {"index":{"searchIndex":["imagefetcher","engine","fetcher","http","options","scriptoptions","parser","json","rawfile","boolean_verbose_option()","define_options()","delay_execution_option()","execute_at_time_option()","fetch_resource()","get_filename_path()","go()","new()","new()","new()","parse()","read()","source_format_option()","source_location_option()","storage_option()","teardown()","gemfile","gemfile.lock","license","readme","benchmarks","source_images"],"longSearchIndex":["imagefetcher","imagefetcher::engine","imagefetcher::fetcher","imagefetcher::fetcher::http","imagefetcher::options","imagefetcher::options::scriptoptions","imagefetcher::parser","imagefetcher::parser::json","imagefetcher::parser::rawfile","imagefetcher::options::scriptoptions#boolean_verbose_option()","imagefetcher::options::scriptoptions#define_options()","imagefetcher::options::scriptoptions#delay_execution_option()","imagefetcher::options::scriptoptions#execute_at_time_option()","imagefetcher::fetcher::http#fetch_resource()","imagefetcher::fetcher::http::get_filename_path()","imagefetcher::engine::go()","imagefetcher::fetcher::http::new()","imagefetcher::options::scriptoptions::new()","imagefetcher::parser::rawfile::new()","imagefetcher::options::parse()","imagefetcher::parser::rawfile#read()","imagefetcher::options::scriptoptions#source_format_option()","imagefetcher::options::scriptoptions#source_location_option()","imagefetcher::options::scriptoptions#storage_option()","imagefetcher::engine::teardown()","","","","","",""],"info":[["ImageFetcher","","ImageFetcher.html","",""],["ImageFetcher::Engine","","ImageFetcher/Engine.html","",""],["ImageFetcher::Fetcher","","ImageFetcher/Fetcher.html","",""],["ImageFetcher::Fetcher::Http","","ImageFetcher/Fetcher/Http.html","",""],["ImageFetcher::Options","","ImageFetcher/Options.html","",""],["ImageFetcher::Options::ScriptOptions","","ImageFetcher/Options/ScriptOptions.html","",""],["ImageFetcher::Parser","","ImageFetcher/Parser.html","",""],["ImageFetcher::Parser::Json","","ImageFetcher/Parser/Json.html","",""],["ImageFetcher::Parser::RawFile","","ImageFetcher/Parser/RawFile.html","",""],["boolean_verbose_option","ImageFetcher::Options::ScriptOptions","ImageFetcher/Options/ScriptOptions.html#method-i-boolean_verbose_option","(parser)","<p>Boolean switch for verbosity.\n"],["define_options","ImageFetcher::Options::ScriptOptions","ImageFetcher/Options/ScriptOptions.html#method-i-define_options","(parser)",""],["delay_execution_option","ImageFetcher::Options::ScriptOptions","ImageFetcher/Options/ScriptOptions.html#method-i-delay_execution_option","(parser)","<p>Cast &#39;delay&#39; argument to a Float.\n"],["execute_at_time_option","ImageFetcher::Options::ScriptOptions","ImageFetcher/Options/ScriptOptions.html#method-i-execute_at_time_option","(parser)","<p>Cast &#39;time&#39; argument to a Time object.\n"],["fetch_resource","ImageFetcher::Fetcher::Http","ImageFetcher/Fetcher/Http.html#method-i-fetch_resource","()","<p>Fetchs a resouce by creating an HTTP request and reading response and writeing it in chunks\n"],["get_filename_path","ImageFetcher::Fetcher::Http","ImageFetcher/Fetcher/Http.html#method-c-get_filename_path","(uri)","<p>populate filename from the original filename and prepend it with epoch time, and the base sotrage location …\n"],["go","ImageFetcher::Engine","ImageFetcher/Engine.html#method-c-go","()","<p>Starting the read/parse and fetch process\n"],["new","ImageFetcher::Fetcher::Http","ImageFetcher/Fetcher/Http.html#method-c-new","(uri)",""],["new","ImageFetcher::Options::ScriptOptions","ImageFetcher/Options/ScriptOptions.html#method-c-new","()",""],["new","ImageFetcher::Parser::RawFile","ImageFetcher/Parser/RawFile.html#method-c-new","()",""],["parse","ImageFetcher::Options","ImageFetcher/Options.html#method-c-parse","(args)",""],["read","ImageFetcher::Parser::RawFile","ImageFetcher/Parser/RawFile.html#method-i-read","()","<p>Read a raw file (new line seperated) and fetch each image-uri inside it\n"],["source_format_option","ImageFetcher::Options::ScriptOptions","ImageFetcher/Options/ScriptOptions.html#method-i-source_format_option","(parser)","<p>Get the source file format\n"],["source_location_option","ImageFetcher::Options::ScriptOptions","ImageFetcher/Options/ScriptOptions.html#method-i-source_location_option","(parser)","<p>Get source file location/URI as string, type will decide which method will be used to parse/read the …\n"],["storage_option","ImageFetcher::Options::ScriptOptions","ImageFetcher/Options/ScriptOptions.html#method-i-storage_option","(parser)","<p>Get the storage option for saving fetched images, currently will be default to local drive, later can …\n"],["teardown","ImageFetcher::Engine","ImageFetcher/Engine.html#method-c-teardown","()","<p>Just a place holder incase we decided to use more stuff :)\n"],["Gemfile","","Gemfile.html","","<p># frozen_string_literal: true\n<p>source “rubygems.org”\n<p>git_source(:github) {|repo_name| “github.com/#{repo_name …\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  diff-lcs (1.3)\n  eventmachine (1.2.7)\n  rspec (3.8.0)\n    rspec-core ...</pre>\n"],["LICENSE","","LICENSE.html","","<p>BSD 2-Clause License\n<p>Copyright © 2019, Waheed Barghouthi All rights reserved.\n<p>Redistribution and use …\n"],["README","","README_md.html","","<p>images_fetcher\n<p>ImageFetcher helps you to fetch images from a list of URIs\n<p>Usage\n"],["benchmarks","","test/benchmarks.html","",""],["source_images","","test/fixtures/source_images_txt.html","","<p>images.pexels.com/photos/2034378/pexels-photo-2034378.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940 …\n"]]}}